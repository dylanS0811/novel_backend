openapi: 3.0.3
info: { title: NovelGrain Backend API, version: 0.4.0 }
servers: [ { url: /api } ]
paths:
  /auth/register:
    post:
      summary: 注册
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ handle, nick, password ]
              properties:
                handle: { type: string }
                nick: { type: string }
                password: { type: string }
      responses: { '200': { description: OK } }
  /auth/login:
    post: { summary: 登录, responses: { '200': { description: OK } } }
  /me:
    get: { summary: 当前用户, responses: { '200': { description: OK } } }
    patch: { summary: 更新当前用户, responses: { '200': { description: OK } } }
  /users/check-nickname:
    get: { summary: 校验昵称是否被占用, parameters: [ { in: query, name: nickname, required: true, schema: { type: string } } ], responses: { '200': { description: OK } } }
  /books:
    get:
      summary: 列表
      parameters:
        - { in: query, name: tab, schema: { type: string, enum: [ hot, new ] }, description: 热度=评论×1+收藏×2+点赞×3 }
        - { in: query, name: category, schema: { type: string } }
        - { in: query, name: orientation, schema: { type: string } }
        - { in: query, name: search, schema: { type: string } }
        - { in: query, name: tag, schema: { type: string } }
        - { in: query, name: page, schema: { type: integer, default: 1 } }
        - { in: query, name: size, schema: { type: integer, default: 20 } }
      responses: { '200': { description: OK } }
    post:
      summary: 新增
      requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/BookCreate' } } } }
      responses: { '200': { description: OK } }
  /books/check:
    get:
      summary: 校验书名作者唯一性
      parameters:
        - { in: query, name: title, required: true, schema: { type: string } }
        - { in: query, name: author, required: true, schema: { type: string } }
      responses: { '200': { description: OK } }
  /books/{id}:
    get: { summary: 详情, parameters: [ { in: path, name: id, required: true, schema: { type: integer } } ], responses: { '200': { description: OK } } }
    patch:
      summary: 更新
      parameters: [ { in: path, name: id, required: true, schema: { type: integer } } ]
      requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/BookUpdate' } } } }
      responses: { '200': { description: OK } }
    delete:
      summary: 删除
      parameters: [ { in: path, name: id, required: true, schema: { type: integer } }, { in: query, name: userId, required: true, schema: { type: integer } } ]
      responses: { '200': { description: OK } }
  /books/{id}/likes:
    post: { summary: 点赞, parameters: [ { in: path, name: id, required: true, schema: { type: integer } }, { in: query, name: userId, required: true, schema: { type: integer } } ], responses: { '200': { description: OK } } }
    delete: { summary: 取消点赞, parameters: [ { in: path, name: id, required: true, schema: { type: integer } }, { in: query, name: userId, required: true, schema: { type: integer } } ], responses: { '200': { description: OK } } }
  /books/{id}/bookmarks:
    post: { summary: 收藏, parameters: [ { in: path, name: id, required: true, schema: { type: integer } }, { in: query, name: userId, required: true, schema: { type: integer } } ], responses: { '200': { description: OK } } }
    delete: { summary: 取消收藏, parameters: [ { in: path, name: id, required: true, schema: { type: integer } }, { in: query, name: userId, required: true, schema: { type: integer } } ], responses: { '200': { description: OK } } }
  /books/{id}/comments:
    get:
      summary: 评论列表
      parameters: [ { in: path, name: id, required: true, schema: { type: integer } }, { in: query, name: userId, required: true, schema: { type: integer } }, { in: query, name: page, schema: { type: integer, default: 1 } }, { in: query, name: size, schema: { type: integer, default: 20 } } ]
      responses: { '200': { description: OK } }
    post:
      summary: 新增评论
      parameters: [ { in: path, name: id, required: true, schema: { type: integer } } ]
      requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/CommentCreate' } } } }
      responses: { '200': { description: OK } }
  /comments/{id}/likes:
    post:
      summary: 点赞评论
      parameters: [ { in: path, name: id, required: true, schema: { type: integer } }, { in: query, name: userId, required: true, schema: { type: integer } } ]
      responses: { '200': { description: OK } }
    delete:
      summary: 取消点赞评论
      parameters: [ { in: path, name: id, required: true, schema: { type: integer } }, { in: query, name: userId, required: true, schema: { type: integer } } ]
      responses: { '200': { description: OK } }
  /tags/suggest:
    get: { summary: 标签建议, parameters: [ { in: query, name: q, required: true, schema: { type: string } } ], responses: { '200': { description: OK } } }
  /tags:
    post: { summary: 创建标签, requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/TagCreate' } } } }, responses: { '200': { description: OK } } }
  /leaderboard:
    get: { summary: 排行榜（热度=评论×1+收藏×2+点赞×3）, parameters: [ { in: query, name: type, schema: { type: string, enum: [ champion, rookie ] } }, { in: query, name: limit, schema: { type: integer, default: 10 } } ], responses: { '200': { description: OK } } }
  /notifications:
    get: { summary: 通知列表, parameters: [ { in: query, name: userId, required: true, schema: { type: integer } }, { in: query, name: type, schema: { type: string } }, { in: query, name: page, schema: { type: integer, default: 1 } }, { in: query, name: size, schema: { type: integer, default: 20 } } ], responses: { '200': { description: OK } } }
  /notifications/read-all:
    post: { summary: 全部已读, parameters: [ { in: query, name: userId, required: true, schema: { type: integer } } ], responses: { '200': { description: OK } } }
  /notifications/{id}/read:
    post: { summary: 单条已读, parameters: [ { in: path, name: id, required: true, schema: { type: integer } }, { in: query, name: userId, required: true, schema: { type: integer } } ], responses: { '200': { description: OK } } }
  /notifications/unread-count:
    get: { summary: 未读通知数量, parameters: [ { in: query, name: userId, required: true, schema: { type: integer } } ], responses: { '200': { description: OK } } }
  /users/{userId}/sheets:
    get: { summary: 用户书单列表, parameters: [ { in: path, name: userId, required: true, schema: { type: integer } } ], responses: { '200': { description: OK } } }
    post: { summary: 新建书单, parameters: [ { in: path, name: userId, required: true, schema: { type: integer } } ], requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/SheetCreate' } } } }, responses: { '200': { description: OK } } }
  /sheets/{id}:
    patch: { summary: 更新书单, parameters: [ { in: path, name: id, required: true, schema: { type: integer } } ], requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/SheetUpdate' } } } }, responses: { '200': { description: OK } } }
    delete: { summary: 删除书单, parameters: [ { in: path, name: id, required: true, schema: { type: integer } } ], responses: { '200': { description: OK } } }
  /sheets/{id}/books:
    get: { summary: 书单里的书, parameters: [ { in: path, name: id, required: true, schema: { type: integer } } ], responses: { '200': { description: OK } } }
    post: { summary: 添加书到书单, parameters: [ { in: path, name: id, required: true, schema: { type: integer } } ], requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/SheetBookCreate' } } } }, responses: { '200': { description: OK } } }
  /sheets/{id}/books/{bookId}:
    patch: { summary: 更新书单里书, parameters: [ { in: path, name: id, required: true, schema: { type: integer } }, { in: path, name: bookId, required: true, schema: { type: integer } } ], requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/SheetBookUpdate' } } } }, responses: { '200': { description: OK } } }
    delete: { summary: 移除书单里的书, parameters: [ { in: path, name: id, required: true, schema: { type: integer } }, { in: path, name: bookId, required: true, schema: { type: integer } } ], responses: { '200': { description: OK } } }
  /sheets/{fromListId}/books/{bookId}/move:
    post: { summary: 书单间移动书籍, parameters: [ { in: path, name: fromListId, required: true, schema: { type: integer } }, { in: path, name: bookId, required: true, schema: { type: integer } } ], requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/SheetMove' } } } }, responses: { '200': { description: OK } } }
components:
  schemas:
    BookCreate:
      type: object
      required: [ title, orientation, category ]
      properties:
        title: { type: string }
        author: { type: string }
        orientation: { type: string }
        category: { type: string }
        blurb: { type: string }
        summary: { type: string }
        tags: { type: array, items: { type: string } }
        recommenderId: { type: integer }
    BookUpdate:
      type: object
      properties:
        title: { type: string }
        author: { type: string }
        orientation: { type: string }
        category: { type: string }
        blurb: { type: string }
        summary: { type: string }
        tags: { type: array, items: { type: string } }
    CommentCreate:
      type: object
      required: [ text, userId ]
      properties:
        text: { type: string }
        parentId: { type: integer, nullable: true }
        userId: { type: integer }
    Comment:
      type: object
      properties:
        id: { type: integer }
        userId: { type: integer }
        userName: { type: string }
        userAvatar: { type: string }
        text: { type: string }
        parentId: { type: integer, nullable: true }
        likes: { type: integer }
        liked: { type: boolean }
        repliesCount: { type: integer }
        createdAt: { type: string, format: date-time }
        replies:
          type: array
          items: { $ref: '#/components/schemas/Comment' }
    TagCreate:
      type: object
      required: [ name ]
      properties: { name: { type: string } }
    SheetCreate:
      type: object
      required: [ name ]
      properties:
        name: { type: string }
        intro: { type: string }
    SheetUpdate:
      type: object
      properties:
        name: { type: string }
        intro: { type: string }
    SheetBookCreate:
      type: object
      required: [ title ]
      properties:
        bookId: { type: integer, nullable: true }
        title: { type: string }
        author: { type: string }
        orientation: { type: string }
        category: { type: string }
        rating: { type: integer, nullable: true }
        review: { type: string, nullable: true }
    SheetBookUpdate:
      type: object
      properties:
        bookId: { type: integer, nullable: true }
        title: { type: string }
        author: { type: string }
        orientation: { type: string }
        category: { type: string }
        rating: { type: integer, nullable: true }
        review: { type: string, nullable: true }
    SheetMove:
      type: object
      required: [ toListId ]
      properties:
        toListId: { type: integer }
    Notification:
      type: object
      properties:
        id: { type: integer }
        type: { type: string }
        title: { type: string, nullable: true }
        content: { type: string, nullable: true }
        actorId: { type: integer, nullable: true }
        actorName: { type: string, nullable: true }
        actorAvatar: { type: string, nullable: true }
        bookId: { type: integer, nullable: true }
        commentId: { type: integer, nullable: true }
        read: { type: boolean }
        createdAt: { type: string, format: date-time }
